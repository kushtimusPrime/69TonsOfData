	// Nathan Hellstedt, Kysh Hari, Charlie Little
	
	import bc.Direction;
	import bc.GameController;
	import bc.GameMap;
	import bc.Location;
	import bc.MapLocation;
	import bc.OrbitPattern;
	import bc.Planet;
	import bc.PlanetMap;
	import bc.StartTurnMessage;
	import bc.Team;
	import bc.Unit;
	import bc.UnitType;
	import bc.VecUnit;
	import bc.VecUnitID;
	import bc.bc;
	import java.util.ArrayList;
	import java.util.Arrays;
	import bc.Planet;
	
	
	public class Player {
	    public static void main(String[] args) throws NullPointerException {
	            GameController gc=new GameController();
	            gc.queueResearch(UnitType.Worker);
	            for(int a=1;a<3;a++) {
	                gc.queueResearch(UnitType.Rocket);
	            }
	            for(int b=1;b<4;b++) {
	                gc.queueResearch(UnitType.Ranger);
	            }
	            for(int c=1;c<4;c++) {
	                gc.queueResearch(UnitType.Healer);
	            }
	            PlanetMap planetMap=gc.startingMap(Planet.Earth);
	            ArrayList<Direction> directions=new ArrayList<Direction>();
	            ArrayList<MapLocation> karboniteLocationsEarth=new ArrayList<MapLocation>();
	        MapLocation center=new MapLocation(Planet.Earth,(int)planetMap.getWidth()/2,(int)planetMap.getHeight()/2);
	            karboniteLocationsEarth=setKarboniteDestination(gc,karboniteLocationsEarth,planetMap);
	            setDirectionsArrayList(gc,directions);
	            Team myTeam=gc.team();
	            Team enemyTeam;
	            if(myTeam.equals(Team.Blue)) {
	            enemyTeam=Team.Red;
	            } else {
	            enemyTeam=Team.Blue;
	            }
	            int[] rotationTries= {0,-1,1,-2,2,-3,3};
	            ArrayList<Unit> unbuiltFactoriesEarth=new ArrayList<Unit>();
	            ArrayList<Unit> builtFactoriesEarth=new ArrayList<Unit>();
	            int canBlueprintFactory=1;
	            int factoryCounter=4;
	            int builtFactoryCount=0;
	            int builtRocketCount=0;
	            int canBlueprintRocket=1;
	            int rocketCount = 0;
	            int workersMars=0;
	            ArrayList<Unit> workersEarth=new ArrayList<Unit>();
	        MapLocation stupidLocation=new MapLocation(Planet.Earth,-1,-1);
	        ArrayList<Unit> unbuiltRocketsEarth=new ArrayList<Unit>();
	        ArrayList<Unit> builtRocketsEarth=new ArrayList<Unit>();
	        ArrayList<Unit> rangersEarth=new ArrayList<Unit>();
	        ArrayList<Unit> workerMars=new ArrayList<Unit>();
	        ArrayList<Integer> workerEarthID=new ArrayList<Integer>();
	        ArrayList<Integer> rangerEarthID=new ArrayList<Integer>();
	        int rangerCount=0;
	        int builtRocketsCounter=0;
	        int rangerCounters=0;
	            while (true) {
	                workersEarth.clear();
	                unbuiltFactoriesEarth.clear();
	                builtFactoriesEarth.clear();
	                unbuiltRocketsEarth.clear();
	                builtRocketsEarth.clear();
	                rangersEarth.clear();
	                workerMars.clear();
	                workerEarthID.clear();
	                rangerEarthID.clear();
	                System.out.println("Current round:"+gc.round());
	                System.out.println("Karbonite:"+gc.karbonite());
	                try {
	                //System.out.println("Get time left "+gc.getTimeLeftMs()+"ms");
	                } catch (Exception e) {
	                    
	                }
	                VecUnit myUnits=gc.myUnits();
	                VecUnit enemyUnits=gc.senseNearbyUnitsByTeam(new MapLocation(Planet.Earth,(int)planetMap.getWidth()/2,(int)planetMap.getHeight()/2), ((planetMap.getHeight())*(planetMap.getWidth())), enemyTeam);
	                VecUnit enemyMarsUnits=gc.senseNearbyUnitsByTeam(new MapLocation(Planet.Mars,(int)planetMap.getWidth()/2,(int)planetMap.getHeight()/2), ((planetMap.getHeight())*(planetMap.getWidth())), enemyTeam);
	                for(int d=0;d<myUnits.size();d++) {
	                    if(myUnits.get(d).unitType().equals(UnitType.Worker)&&myUnits.get(d).location().isOnPlanet(Planet.Earth)) {
	                        if(gc.round()<10) {
	                        		if(blueprintTheFactory(gc,directions,myUnits.get(d))==1) {
	                        			canBlueprintFactory=0;
	                        		}
	                        }
	                    		if(canBlueprintFactory>0&&builtFactoryCount<4) {
	                            if(blueprintTheFactory(gc,directions,myUnits.get(d))==1) {
	                                canBlueprintFactory=0;
	                            }
	                        }
	                            workersEarth.add(myUnits.get(d));
	                            workerEarthID.add(myUnits.get(d).id());
	                            //if(myUnits.get(d).location().isOnPlanet(Planet.Mars)==true) {
	                            //    replicate(gc,myUnits.get(d),directions);
	                            //}
	                            if (builtFactoryCount>=3||gc.round()>=225) {
	                                int didBuild = blueprintTheRocket(gc, directions, myUnits.get(d));
	                            }
	                                    
	                            
	
	                    }
	                
	                            /*else if(unbuiltRockets.size()==0&&unbuiltFactories.size()==0) {
	                                checkForKarbonite(gc,myUnits.get(d),directions);
	                                MapLocation possibleLocation=finalKarboniteDestination(gc,myUnits.get(d),karboniteLocationsEarth);
	                                if(!possibleLocation.equals(stupidLocation)) {
	                                    pathFind(gc,possibleLocation,rotationTries,myUnits.get(d),directions);
	                                }*/
	                            
	                            /*if(builtFactoryCount>=5) {
	                                checkForKarbonite(gc,myUnits.get(d),directions);
	                                MapLocation possibleLocation=finalKarboniteDestination(gc,myUnits.get(d),karboniteLocationsEarth);
	                                if(!possibleLocation.equals(stupidLocation)) {
	                                    pathFind(gc,possibleLocation,rotationTries,myUnits.get(d),directions);
	                                }
	                            }*/
	                            /*
	                             * Blueprint factory once factory is built
	                             */
	                            /*if(factoryCounter<4) {
	                                if(factoryNumber==0) {
	                                    int blueprintedFactory=blueprintTheFactory(gc,directions,myUnits.get(d));
	                                        if(blueprintedFactory==1) {
	                                            factoryCounter++;
	                                            factoryNumber++;
	                                        }
	                                }
	                            }
	                            if(unbuiltFactories.size()>0) {
	                                if(buildTheFactory(gc,unbuiltFactories.get(0),myUnits.get(d))==0) {
	                                    pathFind(gc,unbuiltFactories.get(0).location().mapLocation(),rotationTries,myUnits.get(d),directions);                    
	                                    //MapLocation finalMapLocation,int[] rotationTries,Unit unit,ArrayList<Direction> directions) {
	                                }
	
	                            }
	                            if(unbuiltFactories.get(0).structureIsBuilt()==1) {
	                                factoryNumber--;
	                                built++;
	                            }
	                            if(built>=4) {
	                                checkForKarbonite(gc,myUnits.get(d),directions);
	                                MapLocation possibleLocation=finalKarboniteDestination(gc,myUnits.get(d),karboniteLocationsEarth);
	                                MapLocation stupidLocation=new MapLocation(Planet.Earth,-1,-1);
	                                if(!possibleLocation.equals(stupidLocation)) {
	                                    pathFind(gc,possibleLocation,rotationTries,myUnits.get(d),directions);
	                                }
	                            }*/
	                                /*
	                                 *                  if(factoryCounter>=4) {
	                    for(int a=0;a<workers.size();a++) {
	                        checkForKarbonite(gc,workers.get(a),directions);
	                        MapLocation possibleLocation=finalKarboniteDestination(gc,myUnits.get(a),karboniteLocationsEarth);
	                        MapLocation stupidLocation=new MapLocation(Planet.Earth,-1,-1);
	                        if(possibleLocation.equals(stupidLocation)) {
	                                randomPathFind(gc,directions,workers.get(a));
	                        } else {
	                                pathFind(gc,possibleLocation,rotationTries,workers.get(a),directions);
	                        }
	                    }
	                 }
	                                 */
	
	                    
	                    if(myUnits.get(d).unitType().equals(UnitType.Factory)&&myUnits.get(d).location().isOnPlanet(Planet.Earth)) {
	                            if(myUnits.get(d).structureIsBuilt()==0) {
	                                unbuiltFactoriesEarth.add(myUnits.get(d));
	                            } else {
	                                builtFactoriesEarth.add(myUnits.get(d));
	                            }
	                                /*if(rangerCount%6==5) {
	                                    if(buildHealers(gc,myUnits.get(d))==1) {
	                                        rangerCount++;
	                                    }
	                                }*/
	                                //if(gc.round()<200||builtRocketCount>=2) {
	                            if(builtRocketsCounter>0||rangerCounters<10) {    
	                                buildRangers(gc,myUnits.get(d));
	                            }
	                            
	                                //}
	                                unloadGarrison(gc,myUnits.get(d),directions);
	                            }
	                    
	                    if(myUnits.get(d).unitType().equals(UnitType.Ranger)&&myUnits.get(d).location().isOnPlanet(Planet.Earth)) {
	                            if(myUnits.get(d).location().isInGarrison()==false&&myUnits.get(d).location().isInSpace()==false) {
	    	                        rangersEarth.add(myUnits.get(d));
	    	                        rangerEarthID.add(myUnits.get(d).id());
	                                MapLocation maybe=finalEnemyDestination(gc,myUnits.get(d),enemyUnits,center);
	                                if(!maybe.equals(stupidLocation)) {
	                                    if(builtRocketsCounter==0) {
	                                    pathFind(gc,maybe,rotationTries,myUnits.get(d),directions);
	                                    }
	                                }
	                            }
	                    }
	                    if(myUnits.get(d).unitType().equals(UnitType.Healer)&&myUnits.get(d).location().isOnPlanet(Planet.Earth)) {
	                            if(myUnits.get(d).location().isInGarrison()==false&&myUnits.get(d).location().isInSpace()==false) {
	                                
	                            }
	                    }
	                    if(myUnits.get(d).unitType().equals(UnitType.Rocket)&&myUnits.get(d).location().isOnPlanet(Planet.Earth)) {
	                            if(myUnits.get(d).structureIsBuilt()==0) {
	                                unbuiltRocketsEarth.add(myUnits.get(d));
	                            } else {
	                                builtRocketsEarth.add(myUnits.get(d));
	                            }
	                        
	                    }
	                    if(myUnits.get(d).unitType().equals(UnitType.Rocket)&&gc.planet().equals(Planet.Mars)) {
	                           unloadGarrison(gc,myUnits.get(d),directions);
	                        
	                }
	                    if(myUnits.get(d).unitType().equals(UnitType.Worker)&&myUnits.get(d).location().isOnPlanet(Planet.Mars)&&myUnits.get(d).location().isInGarrison()==false) {
	                            workerMars.add(myUnits.get(d));
	                            PlanetMap marsPlanetMap=gc.startingMap(Planet.Mars);
	                            MapLocation marsCenter=new MapLocation(Planet.Mars,(int)marsPlanetMap.getWidth()/2,(int)marsPlanetMap.getHeight()/2);
	                            pathFind(gc,marsCenter,rotationTries,myUnits.get(d),directions);
	                            replicate(gc,myUnits.get(d),directions);
	                    }
	                    if(myUnits.get(d).unitType().equals(UnitType.Ranger)&&myUnits.get(d).location().isOnPlanet(Planet.Mars)&&myUnits.get(d).location().isInGarrison()==false) {
	                        PlanetMap marsPlanetMap=gc.startingMap(Planet.Mars);
	                        MapLocation marsCenter=new MapLocation(Planet.Mars,(int)marsPlanetMap.getWidth()/2,(int)marsPlanetMap.getHeight()/2);
	                        MapLocation maybe=finalEnemyDestination(gc,myUnits.get(d),enemyMarsUnits,marsCenter);
	                        pathFind(gc,maybe,rotationTries,myUnits.get(d),directions);

	                        /*                            if(myUnits.get(d).location().isInGarrison()==false&&myUnits.get(d).location().isInSpace()==false) {
	                        rangersEarth.add(myUnits.get(d));
	                        rangerEarthID.add(myUnits.get(d).id());
                            MapLocation maybe=finalEnemyDestination(gc,myUnits.get(d),enemyUnits,center);
                            if(!maybe.equals(stupidLocation)) {
                                if(builtRocketsCounter==0) {
                                pathFind(gc,maybe,rotationTries,myUnits.get(d),directions);
                                }
                            }*/
                        }
	                    }
	
	                    
	                
	                /*if(gc.round()<100) {
	                 if(workers.size()>=4) {
	                     workerCounter=4;
	                     }
	                     if(gc.round()<5 ) {
	                     if(workers.size()<4&&workers.size()>0) {
	                     int possiblyRandom=(int)(Math.random()*workers.size());
	                     replicate(gc,workers.get(possiblyRandom),directions);
	                     }
	                     }
	                if(builtFactories.size()>=4) {
	                     factoryCounter=4;
	                }
	                 if(factoryCounter<4&&workers.size()>0) {
	                     if(unbuiltFactories.size()==0) {
	                     int possiblyRandom=(int)(Math.random()*workers.size());
	                     blueprintTheFactory(gc,directions,workers.get(possiblyRandom));
	                     }
	                }
	                 if(factoryCounter<4&&unbuiltFactories.size()>0) {
	                     for(int a=0;a<workers.size();a++) {
	                             int factoryBuilt=buildTheFactory(gc,unbuiltFactories.get(0),workers.get(a));
	                             if(factoryBuilt==0) {
	                                 int found=pathFind(gc,unbuiltFactories.get(0).location().mapLocation(),rotationTries,workers.get(a),directions);
	                                 if(found==0) {
	                                     randomPathFind(gc,directions,workers.get(a));
	                                 }
	                             }
	                     }
	                }
	                }
	                
	*/            workersMars=workerMars.size();
	                builtRocketsCounter=builtRocketsEarth.size();
	                rangerCounters=rangersEarth.size();
	                /*if(unbuiltFactoriesEarth.size()<4&&gc.planet().equals(Planet.Earth)&&workersEarth.size()>0) {
	                    int workerBuild=(int)(Math.random()*workersEarth.size());
	                    blueprintTheFactory(gc,directions,workersEarth.get(workerBuild));
	                }*/
	                if(builtFactoriesEarth.size()>builtFactoryCount) {
	                    builtFactoryCount=builtFactoriesEarth.size();
	                    canBlueprintFactory=1;
	                }
	                if(builtRocketsEarth.size() > 0 && gc.planet() == Planet.Earth) {
	                    for (int a = 0; a < builtRocketsEarth.size(); a++) {
	                    	
	                    VecUnitID inGarrison=builtRocketsEarth.get(a).structureGarrison();
	                    int workerSize=0;
	                    int rangerSize=0;
	                    for(int b=0;b<inGarrison.size();b++) {
	                        if(workerEarthID.contains(inGarrison.get(b))) {
	                            workerSize++;
	                        }
	                        if(rangerEarthID.contains(inGarrison.get(b))) {
	                            rangerSize++;
	                        }
	                    }
	                    MapLocation rocketLocation = builtRocketsEarth.get(a).location().mapLocation();
	                    VecUnit nearbyUnits = gc.senseNearbyUnits(rocketLocation, 1000);
	                          // if (nearbyUnits.size() == 0)
	                             //  nearbyUnits = gc.senseNearbyUnits(rocketLocation, 10000);
	                           
	                      for (int i = 0; i < nearbyUnits.size(); i++) {

	                          if(nearbyUnits.get(i).unitType().equals(UnitType.Worker)&&inGarrison.size()<2) {
	                          if (gc.canLoad(builtRocketsEarth.get(a).id(), nearbyUnits.get(i).id())) {
	                              gc.load(builtRocketsEarth.get(a).id(), nearbyUnits.get(i).id());
	                              workerSize++;
	                          } else {
	                              pathFind(gc, rocketLocation, rotationTries, nearbyUnits.get(i), directions);
	                          }
	                          }
	                          if(nearbyUnits.get(i).unitType().equals(UnitType.Ranger)&&rangerSize<7) {
	                          if (gc.canLoad(builtRocketsEarth.get(a).id(), nearbyUnits.get(i).id())) {
	                              gc.load(builtRocketsEarth.get(a).id(), nearbyUnits.get(i).id());
	                              rangerSize++;
	                          }
	                          else {
	                              pathFind(gc, rocketLocation, rotationTries, nearbyUnits.get(i), directions);
	                          }
	                          }
	                      }
	                    }
	                }
	                    for(int a=0;a<workersEarth.size();a++) {
	                        if(unbuiltFactoriesEarth.size()>0) {
	                            if(buildTheFactory(gc,unbuiltFactoriesEarth.get(0),workersEarth.get(a))==0) {
	                                pathFind(gc,unbuiltFactoriesEarth.get(0).location().mapLocation(),rotationTries,workersEarth.get(a),directions);                    
	                            //MapLocation finalMapLocation,int[] rotationTries,Unit unit,ArrayList<Direction> directions) {
	                            }
	                        }
	                        if(unbuiltRocketsEarth.size()>0 ) {
	                            if(buildTheRocket(gc,unbuiltRocketsEarth.get(0),workersEarth.get(a))==0) {
	                                pathFind(gc,unbuiltRocketsEarth.get(0).location().mapLocation(),rotationTries,workersEarth.get(a),directions);
	                            }
	                        }
	                        if(workersEarth.size()<8&&unbuiltFactoriesEarth.size()>0) {
	                            replicate(gc,workersEarth.get(a),directions);
	                        }
	          
	                        checkForKarbonite(gc,workersEarth.get(a),directions);
	                        MapLocation possibleLocation=finalKarboniteDestination(gc,workersEarth.get(a),karboniteLocationsEarth,center);
	                        pathFind(gc,possibleLocation,rotationTries,workersEarth.get(a),directions);
	                         
	                        }
                        if (gc.planet().equals(Planet.Earth)) {
                            for (int i = 0; i < builtRocketsEarth.size(); i++) {                    
                                MapLocation sendTo = canLaunch(gc, builtRocketsEarth.get(i));
                            
                                if (gc.canLaunchRocket(builtRocketsEarth.get(i).id(), sendTo)&&(builtRocketsEarth.get(i).structureGarrison().size()==8||gc.round()>=730)) {
                                    gc.launchRocket(builtRocketsEarth.get(i).id(), sendTo);
                                }
                            }
                        }
                        
                        
                gc.nextTurn();
	                    }
	    }

	                /*
	                 * if(builtFactories.size()>builtFactoryCount) {
	                 *     builtFactoryCount=builtFactories.size();
	                 *     canBlueprintFactory=1;
	                 * }
	                 */
	            
	            
	    
	            
	    public static ArrayList<Direction> setDirectionsArrayList(GameController gc,ArrayList<Direction> directions) {
	    directions.add(Direction.North);
	    directions.add(Direction.Northeast);
	    directions.add(Direction.East);
	    directions.add(Direction.Southeast);
	    directions.add(Direction.South);
	    directions.add(Direction.Southwest);
	    directions.add(Direction.West);
	    directions.add(Direction.Northwest);
	    return directions;
	    }
	    public static ArrayList<MapLocation> setKarboniteDestination(GameController gc,ArrayList<MapLocation> karboniteLocationsEarth,PlanetMap planetMap) {
	    MapLocation mapLocation;
	    for(int a=0;a<planetMap.getWidth();a++) {
	    for(int b=0;b<planetMap.getHeight();b++) {
	    mapLocation=new MapLocation(Planet.Earth,a,b);
	    try {
	    if(planetMap.initialKarboniteAt(mapLocation)>0) {
	    karboniteLocationsEarth.add(mapLocation);
	    }
	    } catch (Exception e) {
	    
	    }
	    }
	    }
	    return karboniteLocationsEarth;
	    }
	    public static void replicate(GameController gc,Unit worker,ArrayList<Direction> directions) {
	    for(int a=0;a<directions.size();a++) {
	    if(gc.canReplicate(worker.id(), directions.get(a))) {
	    gc.replicate(worker.id(), directions.get(a));
	    }
	    }
	    
	    }
	    public static int blueprintTheFactory(GameController gc,ArrayList<Direction> directions,Unit worker) {
	    	for(int b=0;b<directions.size();b++) {
	            if(gc.canBlueprint(worker.id(), UnitType.Factory, directions.get(b))) {
	                gc.blueprint(worker.id(), UnitType.Factory, directions.get(b));
	                return 1;
	            }
	    }
	    if(gc.canBlueprint(worker.id(), UnitType.Factory, Direction.Center)) {
	            gc.blueprint(worker.id(), UnitType.Factory, Direction.Center);
	            return 1;
	    }
	    return 0;
	    
	    }
	    public static int buildTheFactory(GameController gc,Unit unbuiltFactory,Unit worker) {
	    if(gc.canBuild(worker.id(), unbuiltFactory.id())) {
	            gc.build(worker.id(), unbuiltFactory.id());
	            return 1;
	    }
	    return 0;
	    }
	    public static int pathFind(GameController gc,MapLocation finalMapLocation,int[] rotationTries,Unit unit,ArrayList<Direction> directions) {
	    try {
	            Direction goTo=unit.location().mapLocation().directionTo(finalMapLocation);
	            for(int a=0;a<rotationTries.length;a++) {
	            int index=(directions.indexOf(goTo)+a)%8;
	                if(gc.canMove(unit.id(), directions.get(index))&&gc.isMoveReady(unit.id())) {
	                    gc.moveRobot(unit.id(), directions.get(index));
	                    return 1;
	                }
	            }
	    } catch (Exception e) {
	    
	    }
	    //randomPathFind(gc,directions,unit);
	    return 0;
	    }
	    public static void checkForKarbonite(GameController gc, Unit worker,ArrayList<Direction> directions) {
	            for(int a=0;a<directions.size();a++) {
	                if(gc.canHarvest(worker.id(), directions.get(a))) {
	                    gc.harvest(worker.id(), directions.get(a));
	                }
	            }
	            if(gc.canHarvest(worker.id(), Direction.Center)) {
	                gc.harvest(worker.id(), Direction.Center);
	            }
	    }
	    public static MapLocation finalKarboniteDestination(GameController gc, Unit worker,ArrayList<MapLocation> karboniteLocationsEarth,MapLocation center) {
	            long min=Long.MAX_VALUE;
	            MapLocation optimalMapLocation=center;
	            for(int a=0;a<karboniteLocationsEarth.size();a++) {
	            	try {
	                    if(gc.karboniteAt(karboniteLocationsEarth.get(a))>0) {
	                        long distance=worker.location().mapLocation().distanceSquaredTo(karboniteLocationsEarth.get(a));
	                        if(distance<min) {
	                            min=distance;
	                            optimalMapLocation=karboniteLocationsEarth.get(a);
	                        }
	                    }
	            	} catch (Exception e) {
	            		
	            	}
	            }
	    return optimalMapLocation;
	    }
	    public static int randomPathFind(GameController gc,ArrayList<Direction> directions, Unit robot) {
	            if(gc.isMoveReady(robot.id())) {
	                while(true) {
	                    int randomNumber=(int)(Math.random()*8);
	                    if(gc.canMove(robot.id(), directions.get(randomNumber))) {
	                        gc.moveRobot(robot.id(), directions.get(randomNumber));
	                        return 1;
	                    }
	                }
	            }
	            return 0;
	    }
	    public static int buildRangers(GameController gc,Unit builtFactory) {
	            if(gc.canProduceRobot(builtFactory.id(), UnitType.Ranger) ) {
	                gc.produceRobot(builtFactory.id(), UnitType.Ranger);
	                return 1;
	            }
	            return 0;   
	    }
	    public static int unloadGarrison(GameController gc,Unit builtFactory,ArrayList<Direction> directions) {
	            for(int d=0;d<directions.size();d++) {
	                if(gc.canUnload(builtFactory.id(), directions.get(d))) {
	                    gc.unload(builtFactory.id(), directions.get(d));
	                    return 1;
	                }
	            }
	            return 0;
	    }
	    public static MapLocation finalEnemyDestination(GameController gc, Unit ranger,VecUnit enemyUnits,MapLocation center) {
	        long min=Long.MAX_VALUE;
	        int badGuyIndex=-1;
	        MapLocation optimalMapLocation=center;
	        for(int a=0;a<enemyUnits.size();a++) {
	                long distance=ranger.location().mapLocation().distanceSquaredTo(enemyUnits.get(a).location().mapLocation());
	                    if(distance<min) {
	                        min=distance;
	                        badGuyIndex=a;
	                        optimalMapLocation=enemyUnits.get(a).location().mapLocation();
	                    }
	        }
	        if(badGuyIndex==-1) {
	            return optimalMapLocation;
	        }
	        if(gc.canAttack(ranger.id(), enemyUnits.get(badGuyIndex).id())&&gc.isAttackReady(ranger.id())) {
	            gc.attack(ranger.id(), enemyUnits.get(badGuyIndex).id());
	            return optimalMapLocation;
	        }
	        return optimalMapLocation;
	    }
	     public static int blueprintTheRocket(GameController gc, ArrayList<Direction> directions,Unit worker) {
	          //System.out.println("Number of workers: "+workers.size());
	        System.out.println("in method");       
	    	 	for(int b=0;b<directions.size();b++) {
	                    if(gc.canBlueprint(worker.id(), UnitType.Rocket, directions.get(b))) {
	                        gc.blueprint(worker.id(), UnitType.Rocket, directions.get(b));
	                        return 1;
	                    }
	                }
	                if(gc.canBlueprint(worker.id(), UnitType.Rocket, Direction.Center)) {
	                    gc.blueprint(worker.id(), UnitType.Rocket, Direction.Center);
	                    return 1;
	                }
	                  return 0;
	            }
	     public static int buildTheRocket(GameController gc,Unit unbuiltRocket,Unit worker) {
	         if(gc.canBuild(worker.id(), unbuiltRocket.id())) {
	             gc.build(worker.id(), unbuiltRocket.id());
	             return 1;
	         }
	    
	         return 0;
	     }
	    public static int buildHealers(GameController gc,Unit builtFactory) {
	        if(gc.canProduceRobot(builtFactory.id(), UnitType.Healer) ) {
	            gc.produceRobot(builtFactory.id(), UnitType.Healer);
	            return 1;
	        }
	        return 0;   
	}
	    public static MapLocation canLaunch(GameController gc, Unit rocket)
	     {
	     /*    GameMap b = new GameMap();
	         PlanetMap m = b.getMars_map();
	         long height = m.getHeight();
	         long width = m.getWidth(); */
	         MapLocation land = new MapLocation(Planet.Mars, 0, 0);
	         land.setPlanet(Planet.Mars);
	         int z = 0;
	         
	         while(z == 0) {
	         {
	         int x = (int)(Math.random()* 100);
	         int y = (int)(Math.random()* 100);
	         land.setX(x);
	         land.setY(y);
	         
	         if (gc.canLaunchRocket(rocket.id(), land))
	             return land;
	         }
	         
	     }
	      return null;                  
	}
	                        
	}
	
	
